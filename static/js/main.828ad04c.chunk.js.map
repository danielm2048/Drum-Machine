{"version":3,"sources":["audios/buzz.mp3","audios/clap.mp3","audios/cymbal.mp3","audios/flam.mp3","audios/kick.mp3","audios/opHat.mp3","audios/shaker.mp3","audios/snare.mp3","audios/tom.mp3","audioModule.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","audios","buzz","clap","cymbal","flam","kick","opHat","shaker","snare","tom","DrumPad","props","state","handleClick","bind","handlePressKey","this","clip","volume","vol","load","play","disp","let","event","String","fromCharCode","keyCode","toUpperCase","preventDefault","button","click","document","addEventListener","removeEventListener","className","ref","input","id","onClick","src","React","Component","App","display","changeDisp","handleVolumeChange","setState","rangeSlider","target","value","type","min","max","onChange","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.828ad04c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/buzz.b9a08a5d.mp3\";","module.exports = __webpack_public_path__ + \"static/media/clap.e226c232.mp3\";","module.exports = __webpack_public_path__ + \"static/media/cymbal.04b83e3a.mp3\";","module.exports = __webpack_public_path__ + \"static/media/flam.b44c174d.mp3\";","module.exports = __webpack_public_path__ + \"static/media/kick.c704d11e.mp3\";","module.exports = __webpack_public_path__ + \"static/media/opHat.c40b171b.mp3\";","module.exports = __webpack_public_path__ + \"static/media/shaker.d1667d1c.mp3\";","module.exports = __webpack_public_path__ + \"static/media/snare.6c1c1aba.mp3\";","module.exports = __webpack_public_path__ + \"static/media/tom.37c4a0e1.mp3\";","import buzz from './audios/buzz.mp3';\r\nimport clap from './audios/clap.mp3';\r\nimport cymbal from './audios/cymbal.mp3';\r\nimport flam from './audios/flam.mp3';\r\nimport kick from './audios/kick.mp3';\r\nimport opHat from './audios/opHat.mp3';\r\nimport shaker from './audios/shaker.mp3';\r\nimport snare from './audios/snare.mp3';\r\nimport tom from './audios/tom.mp3';\r\n\r\nconst audios = {\r\n    'Q': [buzz, \"Buzz\"],\r\n    'W': [clap, \"Clap\"],\r\n    'E': [cymbal, \"Cymbal\"],\r\n    'A': [flam, \"Flam\"],\r\n    'S': [kick, \"Kick\"],\r\n    'D': [opHat, \"OpHat\"],\r\n    'Z': [shaker, \"Shaker\"],\r\n    'X': [snare, \"Snare\"],\r\n    'C': [tom, \"Tom\"]\r\n};\r\n\r\nexport { audios };","import React from 'react';\nimport './App.css';\nimport { audios } from './audioModule.js';\n\nclass DrumPad extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n\n    };\n    this.handleClick = this.handleClick.bind(this);\n    this.handlePressKey = this.handlePressKey.bind(this);\n  }\n  handleClick() {\n    this.clip.volume = (this.props.vol / 100);\n    this.clip.load();\n    this.clip.play();\n    this.props.disp(audios[this.props.let][1]);\n  }\n  handlePressKey(event) {\n    if (String.fromCharCode(event.keyCode).toUpperCase() === this.props.let) {\n      event.preventDefault();\n      this.button.click();\n    }\n  }\n  componentDidMount() {\n    document.addEventListener(\"keydown\", this.handlePressKey);\n  }\n  componentWillUnmount() {\n    document.removeEventListener(\"keydown\", this.handlePressKey);\n  }\n  render() {\n    return (\n      <div className=\"col-md-4\">\n        <button className=\"btn btn-default drum-pad\" ref={input => { this.button = input }} id={this.props.let} onClick={this.handleClick}>\n          {this.props.let}\n          <audio className=\"clip\" ref={input => { this.clip = input }} id={this.props.let} src={audios[this.props.let][0]} />\n        </button>\n      </div>\n    );\n  }\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      display: \"Play it!\",\n      volume: 50\n    };\n    this.changeDisp = this.changeDisp.bind(this);\n    this.handleVolumeChange = this.handleVolumeChange.bind(this);\n  }\n  changeDisp(disp) {\n    this.setState({\n      display: disp\n    });\n  }\n  handleVolumeChange(event) {\n    let rangeSlider = event.target;\n    this.setState({\n      display: \"Volume is: \" + rangeSlider.value,\n      volume: rangeSlider.value\n    });\n    if (rangeSlider.value <= 5) {\n      rangeSlider.className = \"noVolume\";\n    }\n    else if (rangeSlider.value > 5 && rangeSlider.value <= 25) {\n      rangeSlider.className = \"volume1\";\n    }\n    else if (rangeSlider.value > 25 && rangeSlider.value <= 75) {\n      rangeSlider.className = \"volume2\";\n    }\n    else if (rangeSlider.value > 75) {\n      rangeSlider.className = \"volume3\";\n    }\n  }\n  render() {\n    return (\n      <div id=\"drum-machine\" className=\"container-fluid\">\n        <div className=\"row\">\n          <h1>Drum Machine</h1>\n        </div>\n        <br />\n        <div id=\"display\" className=\"row\">\n          <p className=\"display\">{this.state.display}</p>\n        </div>\n        <br />\n        <div className=\"row\">\n          <DrumPad let=\"Q\" disp={this.changeDisp} vol={this.state.volume} />\n          <DrumPad let=\"W\" disp={this.changeDisp} vol={this.state.volume} />\n          <DrumPad let=\"E\" disp={this.changeDisp} vol={this.state.volume} />\n        </div>\n        <br />\n        <div className=\"row\">\n          <DrumPad let=\"A\" disp={this.changeDisp} vol={this.state.volume} />\n          <DrumPad let=\"S\" disp={this.changeDisp} vol={this.state.volume} />\n          <DrumPad let=\"D\" disp={this.changeDisp} vol={this.state.volume} />\n        </div>\n        <br />\n        <div className=\"row\">\n          <DrumPad let=\"Z\" disp={this.changeDisp} vol={this.state.volume} />\n          <DrumPad let=\"X\" disp={this.changeDisp} vol={this.state.volume} />\n          <DrumPad let=\"C\" disp={this.changeDisp} vol={this.state.volume} />\n        </div>\n        <br />\n        <div className=\"\">\n          <input type=\"range\" min=\"1\" max=\"100\" value={this.state.volume} onChange={this.handleVolumeChange} className=\"volume2\" id=\"volumeRange\" />\n        </div>\n        <div>\n          <h5>\n            Made by Daniel Mimoun\n          </h5>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}